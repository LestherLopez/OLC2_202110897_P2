2023-10-12 23:28:51:482 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE CORCHETEIZQ (BLOCK (ALT '['))) (RULE CORCHETEDER (BLOCK (ALT ']'))) (RULE GUION_BAJO (BLOCK (ALT '_'))) (RULE AND_SIMPLE (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-10-12 23:28:51:525 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE CORCHETEIZQ (BLOCK (ALT '['))) (RULE CORCHETEDER (BLOCK (ALT ']'))) (RULE GUION_BAJO (BLOCK (ALT '_'))) (RULE AND_SIMPLE (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-10-12 23:28:51:957 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}) (ALT declarefuncstmt {$inst = $declarefuncstmt.decfunc}) (ALT accessfuncinstruction {$inst = $accessfuncinstruction.accessfuncin}) (ALT declarestructstmt {$inst = $declarestructstmt.decstruct }) (ALT assignationstructstmt {$inst = $assignationstructstmt.assignstruct}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listParams PARDER (? (BLOCK (ALT PTCOMA))) { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e elseifstmt)))) elsestmt {
    var elif []interface{}
   
    listElif := localctx.(*IfstmtContext).GetElif()
    for _, e := range listElif {
            elif = append(elif, e.GetElif())
            
    }
    $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, elif, $elsestmt.blkelse); 
}))) (RULE elseifstmt (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER {
    var elif, condelse []interface{}

    
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expr.e, $block.blk, elif, condelse); 

}))) (RULE elsestmt (returns interfaces.Instruction blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER {$blkelse = $block.blk}) (ALT {$blkelse = []interface{}}))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                }) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr (? (BLOCK (ALT PTCOMA))) {$assign = instructions.NewAssignation($ID.line, $ID.pos,  $ID.text, $expr.e)}))) (RULE assignationstructstmt (returns interfaces.Instruction assignstruct) (BLOCK (ALT ID POINT (= second ID) IG expr (? (BLOCK (ALT PTCOMA))) {$assignstruct = instructions.NewAssignationStruct($ID.line, $ID.pos, $ID.text, $second.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (BLOCK (ALT CONTINUE) (ALT RETURN) (ALT BREAK))) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER (? (BLOCK (ALT PTCOMA)))) (ALT VAR (= F ID) DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG (= S ID) (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)}))) (RULE accessfuncinstruction (returns interfaces.Instruction accessfuncin) (BLOCK (ALT ID PARIZQ listParams PARDER PTCOMA {$accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER (? (BLOCK (ALT PTCOMA))) {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER (? (BLOCK (ALT PTCOMA))) {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER (? (BLOCK (ALT PTCOMA))) {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT ID CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) (? (BLOCK (ALT PTCOMA))) {$assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG (? (BLOCK (ALT PTCOMA)))))) (RULE declarefuncstmt (returns interfaces.Instruction decfunc) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)}) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    
    $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2);}) (ALT FUNC ID PARIZQ PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)}) (ALT FUNC ID PARIZQ PARDER LLAVEIZQ block LLAVEDER {
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }
}))) (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (= listf listParamsFunc) COMA parameterfuncstmt {
                    
                                var arrf []interface{}
                                arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                $lf = arrf
                            }) (ALT parameterfuncstmt {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        }))) (RULE parameterfuncstmt (returns interfaces.Expression parameterfunc) (BLOCK (ALT (= exte (BLOCK (ALT ID) (ALT GUION_BAJO))) ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text, 1)}) (ALT (= exte (BLOCK (ALT ID) (ALT GUION_BAJO))) ID DOUBLEPTS (? (BLOCK (ALT INOUT))) CORCHETEIZQ type CORCHETEDER {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2);}) (ALT ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($ID.line, $ID.pos, $type.t, "_",  $ID.text, 1)}))) (RULE declarestructstmt (returns interfaces.Instruction decstruct) (BLOCK (ALT STRUCT ID LLAVEIZQ listStruct LLAVEDER { $decstruct = instructions.NewToDeclareStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStruct.l) }))) (RULE listStruct (returns []interface{} l) (BLOCK (ALT (= list listStruct) VAR ID DOUBLEPTS type {
                            var arr []interface{}
                            newParams := environment.NewStructType($ID.text, $type.t)
                            arr = append($list.l, newParams)
                            $l = arr

}) (ALT VAR ID DOUBLEPTS type {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr
}) (ALT { $l = []interface{}{} }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB) (ALT PERCENT))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {   
        
        if (strings.Contains($NUMBER.text,".")){
           
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,$NUMBER.text,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}) (ALT intfunctionstmt {$e = $intfunctionstmt.intfunc}) (ALT floatfunctionstmt {$e = $floatfunctionstmt.floatfunc}) (ALT stringfunctionstmt {$e = $stringfunctionstmt.stringfunc}) (ALT accessfuncstmt {$e = $accessfuncstmt.funcexp}) (ALT ID (BLOCK (ALT LLAVEIZQ) (ALT PARIZQ)) listStructExp (BLOCK (ALT LLAVEDER) (ALT PARDER)) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT accessstructstmt {$e = $accessstructstmt.accessstruct}))) (RULE accessstructstmt (returns interfaces.Expression accessstruct) (BLOCK (ALT (= list ID) POINT ID { $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text, "nil")  }) (ALT (= list ID) POINT ID POINT (= sec ID) { $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text, $sec.text)  }))) (RULE accessfuncstmt (returns interfaces.Expression funcexp) (BLOCK (ALT ID PARIZQ listParams PARDER {$funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}) (ALT ID PARIZQ PARDER))) (RULE intfunctionstmt (returns interfaces.Expression intfunc) (BLOCK (ALT INTS PARIZQ expr PARDER {$intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)}))) (RULE floatfunctionstmt (returns interfaces.Expression floatfunc) (BLOCK (ALT FLOATS PARIZQ expr PARDER {$floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)}))) (RULE stringfunctionstmt (returns interfaces.Expression stringfunc) (BLOCK (ALT STRINGS PARIZQ expr PARDER {$stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}) (ALT ID { $t = environment.STRUCT  }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA (? (BLOCK (ALT AND_SIMPLE) (ALT ID DOUBLEPTS))) expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT (? (BLOCK (ALT AND_SIMPLE) (ALT ID DOUBLEPTS))) expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) (? (BLOCK (ALT COMA))) ID DOUBLEPTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOUBLEPTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-12 23:28:51:979 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}) (ALT declarefuncstmt {$inst = $declarefuncstmt.decfunc}) (ALT accessfuncinstruction {$inst = $accessfuncinstruction.accessfuncin}) (ALT declarestructstmt {$inst = $declarestructstmt.decstruct }) (ALT assignationstructstmt {$inst = $assignationstructstmt.assignstruct}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listParams PARDER (? (BLOCK (ALT PTCOMA))) { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e elseifstmt)))) elsestmt {
    var elif []interface{}
   
    listElif := localctx.(*IfstmtContext).GetElif()
    for _, e := range listElif {
            elif = append(elif, e.GetElif())
            
    }
    $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, elif, $elsestmt.blkelse); 
}))) (RULE elseifstmt (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER {
    var elif, condelse []interface{}

    
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expr.e, $block.blk, elif, condelse); 

}))) (RULE elsestmt (returns interfaces.Instruction blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER {$blkelse = $block.blk}) (ALT {$blkelse = []interface{}}))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                }) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr (? (BLOCK (ALT PTCOMA))) {$assign = instructions.NewAssignation($ID.line, $ID.pos,  $ID.text, $expr.e)}))) (RULE assignationstructstmt (returns interfaces.Instruction assignstruct) (BLOCK (ALT ID POINT (= second ID) IG expr (? (BLOCK (ALT PTCOMA))) {$assignstruct = instructions.NewAssignationStruct($ID.line, $ID.pos, $ID.text, $second.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (SET CONTINUE RETURN BREAK)) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER (? (BLOCK (ALT PTCOMA)))) (ALT VAR (= F ID) DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG (= S ID) (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)}))) (RULE accessfuncinstruction (returns interfaces.Instruction accessfuncin) (BLOCK (ALT ID PARIZQ listParams PARDER PTCOMA {$accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER (? (BLOCK (ALT PTCOMA))) {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER (? (BLOCK (ALT PTCOMA))) {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER (? (BLOCK (ALT PTCOMA))) {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT ID CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) (? (BLOCK (ALT PTCOMA))) {$assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG (? (BLOCK (ALT PTCOMA)))))) (RULE declarefuncstmt (returns interfaces.Instruction decfunc) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)}) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    
    $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2);}) (ALT FUNC ID PARIZQ PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)}) (ALT FUNC ID PARIZQ PARDER LLAVEIZQ block LLAVEDER {
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }
}))) (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (= listf listParamsFunc) COMA parameterfuncstmt {
                    
                                var arrf []interface{}
                                arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                $lf = arrf
                            }) (ALT parameterfuncstmt {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        }))) (RULE parameterfuncstmt (returns interfaces.Expression parameterfunc) (BLOCK (ALT (= exte (SET ID GUION_BAJO)) ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text, 1)}) (ALT (= exte (SET ID GUION_BAJO)) ID DOUBLEPTS (? (BLOCK (ALT INOUT))) CORCHETEIZQ type CORCHETEDER {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2);}) (ALT ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($ID.line, $ID.pos, $type.t, "_",  $ID.text, 1)}))) (RULE declarestructstmt (returns interfaces.Instruction decstruct) (BLOCK (ALT STRUCT ID LLAVEIZQ listStruct LLAVEDER { $decstruct = instructions.NewToDeclareStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStruct.l) }))) (RULE listStruct (returns []interface{} l) (BLOCK (ALT (= list listStruct) VAR ID DOUBLEPTS type {
                            var arr []interface{}
                            newParams := environment.NewStructType($ID.text, $type.t)
                            arr = append($list.l, newParams)
                            $l = arr

}) (ALT VAR ID DOUBLEPTS type {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr
}) (ALT { $l = []interface{}{} }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {   
        
        if (strings.Contains($NUMBER.text,".")){
           
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,$NUMBER.text,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}) (ALT intfunctionstmt {$e = $intfunctionstmt.intfunc}) (ALT floatfunctionstmt {$e = $floatfunctionstmt.floatfunc}) (ALT stringfunctionstmt {$e = $stringfunctionstmt.stringfunc}) (ALT accessfuncstmt {$e = $accessfuncstmt.funcexp}) (ALT ID (SET LLAVEIZQ PARIZQ) listStructExp (SET LLAVEDER PARDER) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT accessstructstmt {$e = $accessstructstmt.accessstruct}))) (RULE accessstructstmt (returns interfaces.Expression accessstruct) (BLOCK (ALT (= list ID) POINT ID { $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text, "nil")  }) (ALT (= list ID) POINT ID POINT (= sec ID) { $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text, $sec.text)  }))) (RULE accessfuncstmt (returns interfaces.Expression funcexp) (BLOCK (ALT ID PARIZQ listParams PARDER {$funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}) (ALT ID PARIZQ PARDER))) (RULE intfunctionstmt (returns interfaces.Expression intfunc) (BLOCK (ALT INTS PARIZQ expr PARDER {$intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)}))) (RULE floatfunctionstmt (returns interfaces.Expression floatfunc) (BLOCK (ALT FLOATS PARIZQ expr PARDER {$floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)}))) (RULE stringfunctionstmt (returns interfaces.Expression stringfunc) (BLOCK (ALT STRINGS PARIZQ expr PARDER {$stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}) (ALT ID { $t = environment.STRUCT  }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA (? (BLOCK (ALT AND_SIMPLE) (ALT ID DOUBLEPTS))) expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT (? (BLOCK (ALT AND_SIMPLE) (ALT ID DOUBLEPTS))) expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) (? (BLOCK (ALT COMA))) ID DOUBLEPTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOUBLEPTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-12 23:28:51:984 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}) (ALT declarefuncstmt {$inst = $declarefuncstmt.decfunc}) (ALT accessfuncinstruction {$inst = $accessfuncinstruction.accessfuncin}) (ALT declarestructstmt {$inst = $declarestructstmt.decstruct }) (ALT assignationstructstmt {$inst = $assignationstructstmt.assignstruct}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listParams PARDER (? (BLOCK (ALT PTCOMA))) { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e elseifstmt)))) elsestmt {
    var elif []interface{}
   
    listElif := localctx.(*IfstmtContext).GetElif()
    for _, e := range listElif {
            elif = append(elif, e.GetElif())
            
    }
    $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, elif, $elsestmt.blkelse); 
}))) (RULE elseifstmt (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER {
    var elif, condelse []interface{}

    
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expr.e, $block.blk, elif, condelse); 

}))) (RULE elsestmt (returns interfaces.Instruction blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER {$blkelse = $block.blk}) (ALT {$blkelse = []interface{}}))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                }) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr (? (BLOCK (ALT PTCOMA))) {$assign = instructions.NewAssignation($ID.line, $ID.pos,  $ID.text, $expr.e)}))) (RULE assignationstructstmt (returns interfaces.Instruction assignstruct) (BLOCK (ALT ID POINT (= second ID) IG expr (? (BLOCK (ALT PTCOMA))) {$assignstruct = instructions.NewAssignationStruct($ID.line, $ID.pos, $ID.text, $second.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (SET CONTINUE RETURN BREAK)) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER (? (BLOCK (ALT PTCOMA)))) (ALT VAR (= F ID) DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG (= S ID) (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)}))) (RULE accessfuncinstruction (returns interfaces.Instruction accessfuncin) (BLOCK (ALT ID PARIZQ listParams PARDER PTCOMA {$accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER (? (BLOCK (ALT PTCOMA))) {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER (? (BLOCK (ALT PTCOMA))) {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER (? (BLOCK (ALT PTCOMA))) {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT ID CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) (? (BLOCK (ALT PTCOMA))) {$assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG (? (BLOCK (ALT PTCOMA)))))) (RULE declarefuncstmt (returns interfaces.Instruction decfunc) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)}) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    
    $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2);}) (ALT FUNC ID PARIZQ PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)}) (ALT FUNC ID PARIZQ PARDER LLAVEIZQ block LLAVEDER {
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }
}))) (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (= listf listParamsFunc) COMA parameterfuncstmt {
                    
                                var arrf []interface{}
                                arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                $lf = arrf
                            }) (ALT parameterfuncstmt {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        }))) (RULE parameterfuncstmt (returns interfaces.Expression parameterfunc) (BLOCK (ALT (= exte (SET ID GUION_BAJO)) ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text, 1)}) (ALT (= exte (SET ID GUION_BAJO)) ID DOUBLEPTS (? (BLOCK (ALT INOUT))) CORCHETEIZQ type CORCHETEDER {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2);}) (ALT ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($ID.line, $ID.pos, $type.t, "_",  $ID.text, 1)}))) (RULE declarestructstmt (returns interfaces.Instruction decstruct) (BLOCK (ALT STRUCT ID LLAVEIZQ listStruct LLAVEDER { $decstruct = instructions.NewToDeclareStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStruct.l) }))) (RULE listStruct (returns []interface{} l) (BLOCK (ALT (= list listStruct) VAR ID DOUBLEPTS type {
                            var arr []interface{}
                            newParams := environment.NewStructType($ID.text, $type.t)
                            arr = append($list.l, newParams)
                            $l = arr

}) (ALT VAR ID DOUBLEPTS type {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr
}) (ALT { $l = []interface{}{} }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {   
        
        if (strings.Contains($NUMBER.text,".")){
           
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,$NUMBER.text,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}) (ALT intfunctionstmt {$e = $intfunctionstmt.intfunc}) (ALT floatfunctionstmt {$e = $floatfunctionstmt.floatfunc}) (ALT stringfunctionstmt {$e = $stringfunctionstmt.stringfunc}) (ALT accessfuncstmt {$e = $accessfuncstmt.funcexp}) (ALT ID (SET LLAVEIZQ PARIZQ) listStructExp (SET LLAVEDER PARDER) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT accessstructstmt {$e = $accessstructstmt.accessstruct}))) (RULE accessstructstmt (returns interfaces.Expression accessstruct) (BLOCK (ALT (= list ID) POINT ID { $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text, "nil")  }) (ALT (= list ID) POINT ID POINT (= sec ID) { $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text, $sec.text)  }))) (RULE accessfuncstmt (returns interfaces.Expression funcexp) (BLOCK (ALT ID PARIZQ listParams PARDER {$funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}) (ALT ID PARIZQ PARDER))) (RULE intfunctionstmt (returns interfaces.Expression intfunc) (BLOCK (ALT INTS PARIZQ expr PARDER {$intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)}))) (RULE floatfunctionstmt (returns interfaces.Expression floatfunc) (BLOCK (ALT FLOATS PARIZQ expr PARDER {$floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)}))) (RULE stringfunctionstmt (returns interfaces.Expression stringfunc) (BLOCK (ALT STRINGS PARIZQ expr PARDER {$stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}) (ALT ID { $t = environment.STRUCT  }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA (? (BLOCK (ALT AND_SIMPLE) (ALT ID DOUBLEPTS))) expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT (? (BLOCK (ALT AND_SIMPLE) (ALT ID DOUBLEPTS))) expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) (? (BLOCK (ALT COMA))) ID DOUBLEPTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOUBLEPTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-12 23:28:51:984 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-10-12 23:28:52:024 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} lf]
    :   ( {} parameterfuncstmt<tokenIndex=1189> {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1181> parameterfuncstmt<tokenIndex=1183>  {
                              
                                          var arrf []interface{}
                                          arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                          $lf = arrf
                                      }
        )*
    ;
2023-10-12 23:28:52:032 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (BLOCK (ALT {} (parameterfuncstmt (ELEMENT_OPTIONS (= tokenIndex 1189))) {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1181))) (parameterfuncstmt (ELEMENT_OPTIONS (= tokenIndex 1183))) {
                              
                                          var arrf []interface{}
                                          arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                          $lf = arrf
                                      }))))))
2023-10-12 23:28:52:033 left-recursion LogManager.java:25 listStruct returns [[]interface{} l]
    :   ( {} VAR<tokenIndex=1305> ID<tokenIndex=1307> DOUBLEPTS<tokenIndex=1309> type<tokenIndex=1311> {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr
} 
        | { $l = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> VAR<tokenIndex=1293> ID<tokenIndex=1295> DOUBLEPTS<tokenIndex=1297> type<tokenIndex=1299> {
                                      var arr []interface{}
                                      newParams := environment.NewStructType($ID.text, $type.t)
                                      arr = append($list.l, newParams)
                                      $l = arr

          }
        )*
    ;
2023-10-12 23:28:52:050 grammar LogManager.java:25 added: (RULE listStruct (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (VAR (ELEMENT_OPTIONS (= tokenIndex 1305))) (ID (ELEMENT_OPTIONS (= tokenIndex 1307))) (DOUBLEPTS (ELEMENT_OPTIONS (= tokenIndex 1309))) (type (ELEMENT_OPTIONS (= tokenIndex 1311))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr
}) (ALT { $l = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (VAR (ELEMENT_OPTIONS (= tokenIndex 1293))) (ID (ELEMENT_OPTIONS (= tokenIndex 1295))) (DOUBLEPTS (ELEMENT_OPTIONS (= tokenIndex 1297))) (type (ELEMENT_OPTIONS (= tokenIndex 1299))) {
                                      var arr []interface{}
                                      newParams := environment.NewStructType($ID.text, $type.t)
                                      arr = append($list.l, newParams)
                                      $l = arr

          }))))))
2023-10-12 23:28:52:061 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op= NOT<tokenIndex=1468>   left=expr<tokenIndex=1472,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) } 
        | op = SUB<tokenIndex=1482>  left=expr<tokenIndex=1486,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)} 
        | PARIZQ<tokenIndex=1492> expr<tokenIndex=1494> PARDER<tokenIndex=1496> { $e = $expr.e } 
        | NUMBER<tokenIndex=1502>                             
    {   
        
        if (strings.Contains($NUMBER.text,".")){
           
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,$NUMBER.text,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1508>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=1514> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=1520> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=1526> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        | accessstmt<tokenIndex=1532> {$e = $accessstmt.access} 
        | emptvecstmt<tokenIndex=1538> {$e = $emptvecstmt.emptyvec} 
        | countvecstmt<tokenIndex=1544> {$e = $countvecstmt.count} 
        | accessvecstmt<tokenIndex=1550> {$e = $accessvecstmt.accessvec} 
        | intfunctionstmt<tokenIndex=1556> {$e = $intfunctionstmt.intfunc} 
        | floatfunctionstmt<tokenIndex=1562> {$e = $floatfunctionstmt.floatfunc} 
        | stringfunctionstmt<tokenIndex=1568> {$e = $stringfunctionstmt.stringfunc} 
        | accessfuncstmt<tokenIndex=1574>     {$e = $accessfuncstmt.funcexp} 
        | ID<tokenIndex=1580> (LLAVEIZQ<tokenIndex=1583>|PARIZQ<tokenIndex=1585>) listStructExp<tokenIndex=1588> (LLAVEDER<tokenIndex=1591>|PARDER<tokenIndex=1593>) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | accessstructstmt<tokenIndex=1600> {$e = $accessstructstmt.accessstruct} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 25)}?<p=25> op=(MUL<tokenIndex=1338>|DIV<tokenIndex=1340>) right=expr<tokenIndex=1345,p=26> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 24)}?<p=24> op=(ADD<tokenIndex=1358>|SUB<tokenIndex=1360>|PERCENT<tokenIndex=1362>) right=expr<tokenIndex=1367,p=25> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> op=(MAY_IG<tokenIndex=1380>|MAYOR<tokenIndex=1382>) right=expr<tokenIndex=1387,p=24> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(MEN_IG<tokenIndex=1400>|MENOR<tokenIndex=1402>) right=expr<tokenIndex=1407,p=23> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(IG_IG<tokenIndex=1420>|DIF<tokenIndex=1422>) right=expr<tokenIndex=1427,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=AND<tokenIndex=1439> right=expr<tokenIndex=1443,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=OR<tokenIndex=1455> right=expr<tokenIndex=1459,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-10-12 23:28:52:079 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 1468)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 1472) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op (SUB (ELEMENT_OPTIONS (= tokenIndex 1482)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 1486) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1492))) (expr (ELEMENT_OPTIONS (= tokenIndex 1494))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1496))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1502))) {   
        
        if (strings.Contains($NUMBER.text,".")){
           
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,$NUMBER.text,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1508))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 1514))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 1520))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1526))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT (accessstmt (ELEMENT_OPTIONS (= tokenIndex 1532))) {$e = $accessstmt.access}) (ALT (emptvecstmt (ELEMENT_OPTIONS (= tokenIndex 1538))) {$e = $emptvecstmt.emptyvec}) (ALT (countvecstmt (ELEMENT_OPTIONS (= tokenIndex 1544))) {$e = $countvecstmt.count}) (ALT (accessvecstmt (ELEMENT_OPTIONS (= tokenIndex 1550))) {$e = $accessvecstmt.accessvec}) (ALT (intfunctionstmt (ELEMENT_OPTIONS (= tokenIndex 1556))) {$e = $intfunctionstmt.intfunc}) (ALT (floatfunctionstmt (ELEMENT_OPTIONS (= tokenIndex 1562))) {$e = $floatfunctionstmt.floatfunc}) (ALT (stringfunctionstmt (ELEMENT_OPTIONS (= tokenIndex 1568))) {$e = $stringfunctionstmt.stringfunc}) (ALT (accessfuncstmt (ELEMENT_OPTIONS (= tokenIndex 1574))) {$e = $accessfuncstmt.funcexp}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1580))) (SET (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 1583))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1585)))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 1588))) (SET (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 1591))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1593)))) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (accessstructstmt (ELEMENT_OPTIONS (= tokenIndex 1600))) {$e = $accessstructstmt.accessstruct})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 25)}? (ELEMENT_OPTIONS (= p 25))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 1338))) (DIV (ELEMENT_OPTIONS (= tokenIndex 1340))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1345) (= p 26)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 24)}? (ELEMENT_OPTIONS (= p 24))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 1358))) (SUB (ELEMENT_OPTIONS (= tokenIndex 1360))) (PERCENT (ELEMENT_OPTIONS (= tokenIndex 1362))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1367) (= p 25)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 1380))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1382))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1387) (= p 24)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 1400))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1402))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1407) (= p 23)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1420))) (DIF (ELEMENT_OPTIONS (= tokenIndex 1422))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1427) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1439)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1443) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1455)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1459) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-10-12 23:28:52:079 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} (AND_SIMPLE<tokenIndex=1854>| ID<tokenIndex=1857> DOUBLEPTS<tokenIndex=1859>)? expr<tokenIndex=1863> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1835> (AND_SIMPLE<tokenIndex=1838>| ID<tokenIndex=1841> DOUBLEPTS<tokenIndex=1843>)? expr<tokenIndex=1847> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-10-12 23:28:52:085 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (? (BLOCK (ALT (AND_SIMPLE (ELEMENT_OPTIONS (= tokenIndex 1854)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1857))) (DOUBLEPTS (ELEMENT_OPTIONS (= tokenIndex 1859)))))) (expr (ELEMENT_OPTIONS (= tokenIndex 1863))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1835))) (? (BLOCK (ALT (AND_SIMPLE (ELEMENT_OPTIONS (= tokenIndex 1838)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1841))) (DOUBLEPTS (ELEMENT_OPTIONS (= tokenIndex 1843)))))) (expr (ELEMENT_OPTIONS (= tokenIndex 1847))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-10-12 23:28:52:091 left-recursion LogManager.java:25 listStructExp returns [[]interface{} l]
    :   ( {} ID<tokenIndex=1893> DOUBLEPTS<tokenIndex=1895> expr<tokenIndex=1897>{
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1880>?  ID<tokenIndex=1883> DOUBLEPTS<tokenIndex=1885> expr<tokenIndex=1887> {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }
        )*
    ;
2023-10-12 23:28:52:094 grammar LogManager.java:25 added: (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1893))) (DOUBLEPTS (ELEMENT_OPTIONS (= tokenIndex 1895))) (expr (ELEMENT_OPTIONS (= tokenIndex 1897))) {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (? (BLOCK (ALT (COMA (ELEMENT_OPTIONS (= tokenIndex 1880)))))) (ID (ELEMENT_OPTIONS (= tokenIndex 1883))) (DOUBLEPTS (ELEMENT_OPTIONS (= tokenIndex 1885))) (expr (ELEMENT_OPTIONS (= tokenIndex 1887))) {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }))))))
2023-10-12 23:28:52:112 grammar LogManager.java:25 import STRINGS=1
2023-10-12 23:28:52:112 grammar LogManager.java:25 import INTS=2
2023-10-12 23:28:52:112 grammar LogManager.java:25 import FLOATS=3
2023-10-12 23:28:52:112 grammar LogManager.java:25 import BOOLS=4
2023-10-12 23:28:52:112 grammar LogManager.java:25 import CHARACTERS=5
2023-10-12 23:28:52:112 grammar LogManager.java:25 import VAR=6
2023-10-12 23:28:52:112 grammar LogManager.java:25 import NIL=7
2023-10-12 23:28:52:112 grammar LogManager.java:25 import TRUE=8
2023-10-12 23:28:52:112 grammar LogManager.java:25 import FALSE=9
2023-10-12 23:28:52:112 grammar LogManager.java:25 import PRINT=10
2023-10-12 23:28:52:112 grammar LogManager.java:25 import IF=11
2023-10-12 23:28:52:112 grammar LogManager.java:25 import ELSE=12
2023-10-12 23:28:52:112 grammar LogManager.java:25 import WHILE=13
2023-10-12 23:28:52:112 grammar LogManager.java:25 import LET=14
2023-10-12 23:28:52:112 grammar LogManager.java:25 import FOR=15
2023-10-12 23:28:52:112 grammar LogManager.java:25 import IN=16
2023-10-12 23:28:52:112 grammar LogManager.java:25 import SWITCH=17
2023-10-12 23:28:52:112 grammar LogManager.java:25 import CASE=18
2023-10-12 23:28:52:112 grammar LogManager.java:25 import DEFAULT=19
2023-10-12 23:28:52:112 grammar LogManager.java:25 import GUARD=20
2023-10-12 23:28:52:112 grammar LogManager.java:25 import CONTINUE=21
2023-10-12 23:28:52:112 grammar LogManager.java:25 import RETURN=22
2023-10-12 23:28:52:112 grammar LogManager.java:25 import BREAK=23
2023-10-12 23:28:52:112 grammar LogManager.java:25 import APPEND=24
2023-10-12 23:28:52:112 grammar LogManager.java:25 import REMOVELAST=25
2023-10-12 23:28:52:112 grammar LogManager.java:25 import REMOVE=26
2023-10-12 23:28:52:112 grammar LogManager.java:25 import AT=27
2023-10-12 23:28:52:112 grammar LogManager.java:25 import ISEMPTY=28
2023-10-12 23:28:52:112 grammar LogManager.java:25 import COUNT=29
2023-10-12 23:28:52:112 grammar LogManager.java:25 import FUNC=30
2023-10-12 23:28:52:112 grammar LogManager.java:25 import INOUT=31
2023-10-12 23:28:52:112 grammar LogManager.java:25 import STRUCT=32
2023-10-12 23:28:52:112 grammar LogManager.java:25 import NUMBER=33
2023-10-12 23:28:52:112 grammar LogManager.java:25 import STRING=34
2023-10-12 23:28:52:112 grammar LogManager.java:25 import ID=35
2023-10-12 23:28:52:112 grammar LogManager.java:25 import DIF=36
2023-10-12 23:28:52:112 grammar LogManager.java:25 import IG_IG=37
2023-10-12 23:28:52:112 grammar LogManager.java:25 import NOT=38
2023-10-12 23:28:52:112 grammar LogManager.java:25 import OR=39
2023-10-12 23:28:52:112 grammar LogManager.java:25 import AND=40
2023-10-12 23:28:52:112 grammar LogManager.java:25 import IG=41
2023-10-12 23:28:52:112 grammar LogManager.java:25 import IG_ADD=42
2023-10-12 23:28:52:112 grammar LogManager.java:25 import IG_SUB=43
2023-10-12 23:28:52:112 grammar LogManager.java:25 import MAY_IG=44
2023-10-12 23:28:52:112 grammar LogManager.java:25 import MEN_IG=45
2023-10-12 23:28:52:112 grammar LogManager.java:25 import MAYOR=46
2023-10-12 23:28:52:112 grammar LogManager.java:25 import MENOR=47
2023-10-12 23:28:52:112 grammar LogManager.java:25 import MUL=48
2023-10-12 23:28:52:112 grammar LogManager.java:25 import DIV=49
2023-10-12 23:28:52:112 grammar LogManager.java:25 import ADD=50
2023-10-12 23:28:52:112 grammar LogManager.java:25 import SUB=51
2023-10-12 23:28:52:112 grammar LogManager.java:25 import PERCENT=52
2023-10-12 23:28:52:112 grammar LogManager.java:25 import PARIZQ=53
2023-10-12 23:28:52:112 grammar LogManager.java:25 import PARDER=54
2023-10-12 23:28:52:112 grammar LogManager.java:25 import LLAVEIZQ=55
2023-10-12 23:28:52:112 grammar LogManager.java:25 import LLAVEDER=56
2023-10-12 23:28:52:112 grammar LogManager.java:25 import DOUBLEPTS=57
2023-10-12 23:28:52:112 grammar LogManager.java:25 import QUESTION=58
2023-10-12 23:28:52:112 grammar LogManager.java:25 import POINT=59
2023-10-12 23:28:52:112 grammar LogManager.java:25 import COMA=60
2023-10-12 23:28:52:112 grammar LogManager.java:25 import PTCOMA=61
2023-10-12 23:28:52:112 grammar LogManager.java:25 import CORCHETEIZQ=62
2023-10-12 23:28:52:112 grammar LogManager.java:25 import CORCHETEDER=63
2023-10-12 23:28:52:112 grammar LogManager.java:25 import GUION_BAJO=64
2023-10-12 23:28:52:112 grammar LogManager.java:25 import AND_SIMPLE=65
2023-10-12 23:28:52:112 grammar LogManager.java:25 import WHITESPACE=66
2023-10-12 23:28:52:112 grammar LogManager.java:25 import COMMENT=67
2023-10-12 23:28:52:112 grammar LogManager.java:25 import LINE_COMMENT=68
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'String'=1
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'Int'=2
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'Float'=3
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'Bool'=4
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'Character'=5
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'var'=6
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'nil'=7
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'true'=8
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'false'=9
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'print'=10
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'if'=11
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'else'=12
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'while'=13
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'let'=14
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'for'=15
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'in'=16
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'switch'=17
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'case'=18
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'default'=19
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'guard'=20
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'continue'=21
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'return'=22
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'break'=23
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'append'=24
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'removeLast'=25
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'remove'=26
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'at'=27
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'isEmpty'=28
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'count'=29
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'func'=30
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'inout'=31
2023-10-12 23:28:52:112 grammar LogManager.java:25 import 'struct'=32
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '!='=36
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '=='=37
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '!'=38
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '||'=39
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '&&'=40
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '='=41
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '+='=42
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '-='=43
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '>='=44
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '<='=45
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '>'=46
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '<'=47
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '*'=48
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '/'=49
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '+'=50
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '-'=51
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '%'=52
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '('=53
2023-10-12 23:28:52:112 grammar LogManager.java:25 import ')'=54
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '{'=55
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '}'=56
2023-10-12 23:28:52:112 grammar LogManager.java:25 import ':'=57
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '?'=58
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '.'=59
2023-10-12 23:28:52:112 grammar LogManager.java:25 import ','=60
2023-10-12 23:28:52:112 grammar LogManager.java:25 import ';'=61
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '['=62
2023-10-12 23:28:52:112 grammar LogManager.java:25 import ']'=63
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '_'=64
2023-10-12 23:28:52:112 grammar LogManager.java:25 import '&'=65
2023-10-12 23:28:52:112 grammar LogManager.java:25 tokens={STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, GUARD=20, CONTINUE=21, RETURN=22, BREAK=23, APPEND=24, REMOVELAST=25, REMOVE=26, AT=27, ISEMPTY=28, COUNT=29, FUNC=30, INOUT=31, STRUCT=32, NUMBER=33, STRING=34, ID=35, DIF=36, IG_IG=37, NOT=38, OR=39, AND=40, IG=41, IG_ADD=42, IG_SUB=43, MAY_IG=44, MEN_IG=45, MAYOR=46, MENOR=47, MUL=48, DIV=49, ADD=50, SUB=51, PERCENT=52, PARIZQ=53, PARDER=54, LLAVEIZQ=55, LLAVEDER=56, DOUBLEPTS=57, QUESTION=58, POINT=59, COMA=60, PTCOMA=61, CORCHETEIZQ=62, CORCHETEDER=63, GUION_BAJO=64, AND_SIMPLE=65, WHITESPACE=66, COMMENT=67, LINE_COMMENT=68, 'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'guard'=20, 'continue'=21, 'return'=22, 'break'=23, 'append'=24, 'removeLast'=25, 'remove'=26, 'at'=27, 'isEmpty'=28, 'count'=29, 'func'=30, 'inout'=31, 'struct'=32, '!='=36, '=='=37, '!'=38, '||'=39, '&&'=40, '='=41, '+='=42, '-='=43, '>='=44, '<='=45, '>'=46, '<'=47, '*'=48, '/'=49, '+'=50, '-'=51, '%'=52, '('=53, ')'=54, '{'=55, '}'=56, ':'=57, '?'=58, '.'=59, ','=60, ';'=61, '['=62, ']'=63, '_'=64, '&'=65}
2023-10-12 23:28:52:118 semantics LogManager.java:25 tokens={EOF=-1, STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, GUARD=20, CONTINUE=21, RETURN=22, BREAK=23, APPEND=24, REMOVELAST=25, REMOVE=26, AT=27, ISEMPTY=28, COUNT=29, FUNC=30, INOUT=31, STRUCT=32, NUMBER=33, STRING=34, ID=35, DIF=36, IG_IG=37, NOT=38, OR=39, AND=40, IG=41, IG_ADD=42, IG_SUB=43, MAY_IG=44, MEN_IG=45, MAYOR=46, MENOR=47, MUL=48, DIV=49, ADD=50, SUB=51, PERCENT=52, PARIZQ=53, PARDER=54, LLAVEIZQ=55, LLAVEDER=56, DOUBLEPTS=57, QUESTION=58, POINT=59, COMA=60, PTCOMA=61, CORCHETEIZQ=62, CORCHETEDER=63, GUION_BAJO=64, AND_SIMPLE=65, WHITESPACE=66, COMMENT=67, LINE_COMMENT=68}
2023-10-12 23:28:52:119 semantics LogManager.java:25 strings={'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'guard'=20, 'continue'=21, 'return'=22, 'break'=23, 'append'=24, 'removeLast'=25, 'remove'=26, 'at'=27, 'isEmpty'=28, 'count'=29, 'func'=30, 'inout'=31, 'struct'=32, '!='=36, '=='=37, '!'=38, '||'=39, '&&'=40, '='=41, '+='=42, '-='=43, '>='=44, '<='=45, '>'=46, '<'=47, '*'=48, '/'=49, '+'=50, '-'=51, '%'=52, '('=53, ')'=54, '{'=55, '}'=56, ':'=57, '?'=58, '.'=59, ','=60, ';'=61, '['=62, ']'=63, '_'=64, '&'=65}
2023-10-12 23:28:52:178 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-10-12 23:28:52:178 LL1 LogManager.java:25 look=[{6, 10..11, 13..15, 17, 20..23, 30, 32, 35}, {<EOF>, 18..19, 21..23, 56}]
2023-10-12 23:28:52:178 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:178 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-10-12 23:28:52:178 LL1 LogManager.java:25 look=[10, 6, 14, 35, 35, 11, 13, 15, 17, 20, {21..23}, 6, 35, 35, 35, 35, 30, 35, 32, 35]
2023-10-12 23:28:52:178 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:178 LL1 LogManager.java:25 
DECISION 2 in rule printstmt
2023-10-12 23:28:52:181 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:181 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:181 LL1 LogManager.java:25 
DECISION 3 in rule declarestmt
2023-10-12 23:28:52:181 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:181 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:181 LL1 LogManager.java:25 
DECISION 4 in rule declarestmt
2023-10-12 23:28:52:181 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:181 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:182 LL1 LogManager.java:25 
DECISION 5 in rule declarestmt
2023-10-12 23:28:52:182 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:183 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:183 LL1 LogManager.java:25 
DECISION 6 in rule declarestmt
2023-10-12 23:28:52:183 LL1 LogManager.java:25 look=[6, 6, 6]
2023-10-12 23:28:52:183 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:183 LL1 LogManager.java:25 
DECISION 7 in rule constantstmt
2023-10-12 23:28:52:183 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:183 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:183 LL1 LogManager.java:25 
DECISION 8 in rule constantstmt
2023-10-12 23:28:52:183 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:183 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:183 LL1 LogManager.java:25 
DECISION 9 in rule constantstmt
2023-10-12 23:28:52:183 LL1 LogManager.java:25 look=[14, 14]
2023-10-12 23:28:52:183 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:183 LL1 LogManager.java:25 
DECISION 10 in rule blockelifs
2023-10-12 23:28:52:183 LL1 LogManager.java:25 look=[11, <EOF>]
2023-10-12 23:28:52:183 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:183 LL1 LogManager.java:25 
DECISION 11 in rule ifstmt
2023-10-12 23:28:52:185 LL1 LogManager.java:25 look=[12, {<EOF>, 6, 10..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:185 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:185 LL1 LogManager.java:25 
DECISION 12 in rule elsestmt
2023-10-12 23:28:52:187 LL1 LogManager.java:25 look=[12, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:187 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:187 LL1 LogManager.java:25 
DECISION 13 in rule switchstmt
2023-10-12 23:28:52:187 LL1 LogManager.java:25 look=[17, 17]
2023-10-12 23:28:52:187 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:187 LL1 LogManager.java:25 
DECISION 14 in rule casestmt
2023-10-12 23:28:52:187 LL1 LogManager.java:25 look=[18, 18]
2023-10-12 23:28:52:187 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:187 LL1 LogManager.java:25 
DECISION 15 in rule blockcases
2023-10-12 23:28:52:188 LL1 LogManager.java:25 look=[18, {18, 56}]
2023-10-12 23:28:52:188 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:188 LL1 LogManager.java:25 
DECISION 16 in rule assignationstmt
2023-10-12 23:28:52:188 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:188 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:188 LL1 LogManager.java:25 
DECISION 17 in rule assignationstructstmt
2023-10-12 23:28:52:189 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:190 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:190 LL1 LogManager.java:25 
DECISION 18 in rule forstmt
2023-10-12 23:28:52:190 LL1 LogManager.java:25 look=[15, 15]
2023-10-12 23:28:52:190 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:190 LL1 LogManager.java:25 
DECISION 19 in rule transferstmt
2023-10-12 23:28:52:190 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:190 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:190 LL1 LogManager.java:25 
DECISION 20 in rule transferstmt
2023-10-12 23:28:52:191 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:191 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:191 LL1 LogManager.java:25 
DECISION 21 in rule transferstmt
2023-10-12 23:28:52:191 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:191 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:191 LL1 LogManager.java:25 
DECISION 22 in rule transferstmt
2023-10-12 23:28:52:191 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:191 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:191 LL1 LogManager.java:25 
DECISION 23 in rule transferstmt
2023-10-12 23:28:52:191 LL1 LogManager.java:25 look=[22, 22, 21, 23]
2023-10-12 23:28:52:191 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:191 LL1 LogManager.java:25 
DECISION 24 in rule declarevectorstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 25 in rule declarevectorstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 26 in rule declarevectorstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 27 in rule declarevectorstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 28 in rule declarevectorstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[6, 6, 6, 6]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 29 in rule appendstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 30 in rule removelaststmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 31 in rule removestmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 32 in rule assignationvecstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 33 in rule declarematrixstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[61, <EOF>]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 34 in rule declarefuncstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[30, 30, 30, 30]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 35 in rule listParamsFunc
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[null, 54]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 36 in rule parameterfuncstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[31, 62]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 37 in rule parameterfuncstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[{35, 64}, {35, 64}, 35]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 38 in rule listStruct
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[6, null]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 39 in rule listStruct
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[null, 56]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 40 in rule expr
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[38, 51, 53, 33, 34, 8, 9, 7, 35, 35, 35, 35, 2, 3, 1, 35, 35, 35]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 41 in rule expr
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 42 in rule expr
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[null, null]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 43 in rule accessstructstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[35, 35]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 44 in rule accessfuncstmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[35, 35]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 45 in rule increaseanddecreasestmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 46 in rule increaseanddecreasestmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 47 in rule increaseanddecreasestmt
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[35, 35]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 48 in rule type
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5, 35]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 49 in rule listParams
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[65, 35, {1..3, 7..9, 33..35, 38, 51, 53}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 50 in rule listParams
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[65, 35, {1..3, 7..9, 33..35, 38, 51, 53}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 51 in rule listParams
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[null, {54, 63}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 52 in rule listStructExp
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[35, null]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 53 in rule listStructExp
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[60, 35]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? true
2023-10-12 23:28:52:192 LL1 LogManager.java:25 
DECISION 54 in rule listStructExp
2023-10-12 23:28:52:192 LL1 LogManager.java:25 look=[null, {54, 56}]
2023-10-12 23:28:52:192 LL1 LogManager.java:25 LL(1)? false
2023-10-12 23:28:52:192 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-10-12 23:28:52:210 action-translator LogManager.java:25 translate $code = $block.blk
2023-10-12 23:28:52:210 action-translator LogManager.java:25 attr [@-1,1:4='code',<0>,18:13]
2023-10-12 23:28:52:210 action-translator LogManager.java:25 qattr [@-1,9:13='block',<0>,18:21].[@-1,15:17='blk',<0>,18:27]
2023-10-12 23:28:52:210 action-translator LogManager.java:25 translate 
$blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-10-12 23:28:52:210 action-translator LogManager.java:25 attr [@-1,3:5='blk',<0>,23:1]
2023-10-12 23:28:52:210 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    
2023-10-12 23:28:52:210 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,30:13]
2023-10-12 23:28:52:210 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,30:27]
2023-10-12 23:28:52:218 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-10-12 23:28:52:218 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,37:14]
2023-10-12 23:28:52:219 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,37:22].[@-1,20:23='prnt',<0>,37:32]
2023-10-12 23:28:52:219 action-translator LogManager.java:25 translate $inst = $declarestmt.dec
2023-10-12 23:28:52:219 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,38:15]
2023-10-12 23:28:52:219 action-translator LogManager.java:25 qattr [@-1,9:19='declarestmt',<0>,38:23].[@-1,21:23='dec',<0>,38:35]
2023-10-12 23:28:52:220 action-translator LogManager.java:25 translate $inst = $constantstmt.const
2023-10-12 23:28:52:220 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,39:16]
2023-10-12 23:28:52:220 action-translator LogManager.java:25 qattr [@-1,9:20='constantstmt',<0>,39:24].[@-1,22:26='const',<0>,39:37]
2023-10-12 23:28:52:220 action-translator LogManager.java:25 translate $inst = $assignationstmt.assign
2023-10-12 23:28:52:220 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,40:19]
2023-10-12 23:28:52:221 action-translator LogManager.java:25 qattr [@-1,9:23='assignationstmt',<0>,40:27].[@-1,25:30='assign',<0>,40:43]
2023-10-12 23:28:52:221 action-translator LogManager.java:25 translate $inst = $increaseanddecreasestmt.increasedecrease
2023-10-12 23:28:52:221 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,41:27]
2023-10-12 23:28:52:221 action-translator LogManager.java:25 qattr [@-1,9:31='increaseanddecreasestmt',<0>,41:35].[@-1,33:48='increasedecrease',<0>,41:59]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate  $inst = $ifstmt.ift 
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:11]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,42:19].[@-1,17:19='ift',<0>,42:26]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $whilestmt.while
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,43:13]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:17='whilestmt',<0>,43:21].[@-1,19:23='while',<0>,43:31]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $forstmt.for
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,44:11]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:15='forstmt',<0>,44:19].[@-1,17:19='for',<0>,44:27]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $switchstmt.switch
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,45:14]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:18='switchstmt',<0>,45:22].[@-1,20:25='switch',<0>,45:33]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $guardstmt.gua
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:13]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:17='guardstmt',<0>,46:21].[@-1,19:21='gua',<0>,46:31]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $transferstmt.tran
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,47:16]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:20='transferstmt',<0>,47:24].[@-1,22:25='tran',<0>,47:37]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $declarevectorstmt.decvec
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,48:21]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:25='declarevectorstmt',<0>,48:29].[@-1,27:32='decvec',<0>,48:47]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $appendstmt.app
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,49:17]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:18='appendstmt',<0>,49:25].[@-1,20:22='app',<0>,49:36]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $removelaststmt.removl
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,50:18]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:22='removelaststmt',<0>,50:26].[@-1,24:29='removl',<0>,50:41]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $removestmt.remov
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,51:14]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:18='removestmt',<0>,51:22].[@-1,20:24='remov',<0>,51:33]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $assignationvecstmt.assignvec
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,52:22]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:26='assignationvecstmt',<0>,52:30].[@-1,28:36='assignvec',<0>,52:49]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $declarefuncstmt.decfunc
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,53:19]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:23='declarefuncstmt',<0>,53:27].[@-1,25:31='decfunc',<0>,53:43]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $accessfuncinstruction.accessfuncin
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,54:25]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:29='accessfuncinstruction',<0>,54:33].[@-1,31:42='accessfuncin',<0>,54:55]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $declarestructstmt.decstruct 
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,55:25]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:25='declarestructstmt',<0>,55:33].[@-1,27:35='decstruct',<0>,55:51]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 translate $inst = $assignationstructstmt.assignstruct
2023-10-12 23:28:52:222 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,56:25]
2023-10-12 23:28:52:222 action-translator LogManager.java:25 qattr [@-1,9:29='assignationstructstmt',<0>,56:33].[@-1,31:42='assignstruct',<0>,56:55]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)
2023-10-12 23:28:52:229 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,60:43]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,60:73].[@-1,38:41='line',<0>,60:79]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,45:49='PRINT',<0>,60:86].[@-1,51:53='pos',<0>,60:92]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,60:98].[@-1,68:68='l',<0>,60:109]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)
2023-10-12 23:28:52:229 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,65:41]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,65:74].[@-1,38:41='line',<0>,65:78]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,65:85].[@-1,49:51='pos',<0>,65:89]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,65:95].[@-1,58:61='text',<0>,65:98]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,65:105].[@-1,70:70='t',<0>,65:110]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,65:114].[@-1,79:79='e',<0>,65:119]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-10-12 23:28:52:229 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,66:26]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,66:59].[@-1,38:41='line',<0>,66:63]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,66:70].[@-1,49:51='pos',<0>,66:74]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,66:80].[@-1,58:61='text',<0>,66:83]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,66:108].[@-1,88:88='e',<0>,66:113]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)
2023-10-12 23:28:52:229 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,67:42]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,67:75].[@-1,38:41='line',<0>,67:79]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,67:86].[@-1,49:51='pos',<0>,67:90]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,67:96].[@-1,58:61='text',<0>,67:99]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,67:106].[@-1,70:70='t',<0>,67:111]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)
2023-10-12 23:28:52:229 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,71:41]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,71:76].[@-1,40:43='line',<0>,71:80]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,71:87].[@-1,51:53='pos',<0>,71:91]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,71:97].[@-1,60:63='text',<0>,71:100]
2023-10-12 23:28:52:229 action-translator LogManager.java:25 qattr [@-1,67:70='type',<0>,71:107].[@-1,72:72='t',<0>,71:112]
2023-10-12 23:28:52:235 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,71:116].[@-1,81:81='e',<0>,71:121]
2023-10-12 23:28:52:236 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-10-12 23:28:52:236 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,72:26]
2023-10-12 23:28:52:236 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,72:61].[@-1,40:43='line',<0>,72:65]
2023-10-12 23:28:52:236 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,72:72].[@-1,51:53='pos',<0>,72:76]
2023-10-12 23:28:52:237 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,72:82].[@-1,60:63='text',<0>,72:85]
2023-10-12 23:28:52:237 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,72:110].[@-1,90:90='e',<0>,72:115]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 translate 
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  
2023-10-12 23:28:52:238 action-translator LogManager.java:25 attr [@-1,3:7='blkef',<0>,79:1]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 translate    
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    
2023-10-12 23:28:52:238 action-translator LogManager.java:25 attr [@-1,114:118='blkef',<0>,88:13]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 attr [@-1,130:134='blkef',<0>,88:29]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 translate 
    var elif []interface{}
   
    listElif := localctx.(*IfstmtContext).GetElif()
    for _, e := range listElif {
            elif = append(elif, e.GetElif())
            
    }
    $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, elif, $elsestmt.blkelse); 

2023-10-12 23:28:52:238 action-translator LogManager.java:25 setAttr [@-1,194:196='ift',<0>,114:5] [@-1,199:282=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, elif, $elsestmt.blkelse)',<0>,114:10]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, elif, $elsestmt.blkelse)
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,106:78].[@-1,24:27='line',<0>,106:81]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,106:88].[@-1,34:36='pos',<0>,106:91]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,106:97].[@-1,45:45='e',<0>,106:102]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,49:53='block',<0>,106:106].[@-1,55:57='blk',<0>,106:112]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,67:74='elsestmt',<0>,106:124].[@-1,76:82='blkelse',<0>,106:133]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 translate 
    var elif, condelse []interface{}

    
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expr.e, $block.blk, elif, condelse); 


2023-10-12 23:28:52:238 action-translator LogManager.java:25 setAttr [@-1,53:56='elif',<0>,123:5] [@-1,59:137=' instructions.NewIf($ELSE.line, $ELSE.pos, $expr.e, $block.blk, elif, condelse)',<0>,123:11]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 translate  instructions.NewIf($ELSE.line, $ELSE.pos, $expr.e, $block.blk, elif, condelse)
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,21:24='ELSE',<0>,119:60].[@-1,26:29='line',<0>,119:65]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,33:36='ELSE',<0>,119:72].[@-1,38:40='pos',<0>,119:77]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,44:47='expr',<0>,119:83].[@-1,49:49='e',<0>,119:88]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,53:57='block',<0>,119:92].[@-1,59:61='blk',<0>,119:98]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 translate $blkelse = $block.blk
2023-10-12 23:28:52:238 action-translator LogManager.java:25 attr [@-1,1:7='blkelse',<0>,130:32]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,12:16='block',<0>,130:43].[@-1,18:20='blk',<0>,130:49]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 translate $blkelse = []interface{}
2023-10-12 23:28:52:238 action-translator LogManager.java:25 attr [@-1,1:7='blkelse',<0>,131:3]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 translate  $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);
2023-10-12 23:28:52:238 action-translator LogManager.java:25 setAttr [@-1,2:7='switch',<0>,137:58] [@-1,10:91=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)',<0>,137:66]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,137:81].[@-1,32:35='line',<0>,137:88]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,137:95].[@-1,46:48='pos',<0>,137:102]
2023-10-12 23:28:52:238 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,137:108].[@-1,57:57='e',<0>,137:113]
2023-10-12 23:28:52:246 action-translator LogManager.java:25 qattr [@-1,72:76='block',<0>,137:128].[@-1,78:80='blk',<0>,137:134]
2023-10-12 23:28:52:246 action-translator LogManager.java:25 translate $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);
2023-10-12 23:28:52:246 action-translator LogManager.java:25 setAttr [@-1,1:6='switch',<0>,138:44] [@-1,9:92=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil)',<0>,138:52]
2023-10-12 23:28:52:246 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil)
2023-10-12 23:28:52:247 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,138:68].[@-1,32:35='line',<0>,138:75]
2023-10-12 23:28:52:247 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,138:82].[@-1,46:48='pos',<0>,138:89]
2023-10-12 23:28:52:247 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,138:95].[@-1,57:57='e',<0>,138:100]
2023-10-12 23:28:52:247 action-translator LogManager.java:25 qattr [@-1,66:73='casestmt',<0>,138:109].[@-1,75:77='cas',<0>,138:118]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 translate  $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                
2023-10-12 23:28:52:248 action-translator LogManager.java:25 attr [@-1,2:4='cas',<0>,141:41]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 qattr [@-1,30:33='CASE',<0>,141:69].[@-1,35:38='line',<0>,141:74]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 qattr [@-1,41:44='CASE',<0>,141:80].[@-1,46:48='pos',<0>,141:85]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,141:91].[@-1,57:57='e',<0>,141:96]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 qattr [@-1,60:64='block',<0>,141:99].[@-1,66:68='blk',<0>,141:105]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 qattr [@-1,72:81='blockcases',<0>,141:111].[@-1,83:89='blkcase',<0>,141:122]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 translate  $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)
2023-10-12 23:28:52:248 action-translator LogManager.java:25 attr [@-1,2:4='cas',<0>,143:63]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 qattr [@-1,30:33='CASE',<0>,143:91].[@-1,35:38='line',<0>,143:96]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 qattr [@-1,41:44='CASE',<0>,143:102].[@-1,46:48='pos',<0>,143:107]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,143:113].[@-1,57:57='e',<0>,143:118]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 qattr [@-1,60:62='sen',<0>,143:121].[@-1,64:66='blk',<0>,143:125]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 qattr [@-1,70:72='def',<0>,143:131].[@-1,74:76='blk',<0>,143:135]
2023-10-12 23:28:52:248 action-translator LogManager.java:25 translate 
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  
2023-10-12 23:28:52:248 action-translator LogManager.java:25 attr [@-1,7:13='blkcase',<0>,147:5]
2023-10-12 23:28:52:252 action-translator LogManager.java:25 translate 
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    
2023-10-12 23:28:52:252 action-translator LogManager.java:25 attr [@-1,118:124='blkcase',<0>,154:13]
2023-10-12 23:28:52:252 action-translator LogManager.java:25 attr [@-1,136:142='blkcase',<0>,154:31]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 translate $assign = instructions.NewAssignation($ID.line, $ID.pos,  $ID.text, $expr.e)
2023-10-12 23:28:52:254 action-translator LogManager.java:25 attr [@-1,1:6='assign',<0>,162:22]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,162:60].[@-1,42:45='line',<0>,162:63]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,162:70].[@-1,52:54='pos',<0>,162:73]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,162:80].[@-1,62:65='text',<0>,162:83]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,162:90].[@-1,74:74='e',<0>,162:95]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 translate $assignstruct = instructions.NewAssignationStruct($ID.line, $ID.pos, $ID.text, $second.text, $expr.e)
2023-10-12 23:28:52:254 action-translator LogManager.java:25 attr [@-1,1:12='assignstruct',<0>,166:38]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,166:88].[@-1,54:57='line',<0>,166:91]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,166:98].[@-1,64:66='pos',<0>,166:101]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,70:71='ID',<0>,166:107].[@-1,73:76='text',<0>,166:110]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,80:85='second',<0>,166:117].[@-1,87:90='text',<0>,166:124]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,94:97='expr',<0>,166:131].[@-1,99:99='e',<0>,166:136]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 translate $while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)
2023-10-12 23:28:52:254 action-translator LogManager.java:25 attr [@-1,1:5='while',<0>,170:38]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,32:36='WHILE',<0>,170:69].[@-1,38:41='line',<0>,170:75]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,45:49='WHILE',<0>,170:82].[@-1,51:53='pos',<0>,170:88]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,170:95].[@-1,63:63='e',<0>,170:100]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,170:104].[@-1,73:75='blk',<0>,170:110]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)
2023-10-12 23:28:52:254 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,174:43]
2023-10-12 23:28:52:254 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,174:70].[@-1,32:35='line',<0>,174:74]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,174:81].[@-1,43:45='pos',<0>,174:85]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,174:91].[@-1,52:55='text',<0>,174:94]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,174:101].[@-1,64:64='e',<0>,174:106]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,174:115].[@-1,79:81='blk',<0>,174:121]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)
2023-10-12 23:28:52:259 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,175:72]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,175:99].[@-1,32:35='line',<0>,175:103]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,175:110].[@-1,43:45='pos',<0>,175:114]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,175:120].[@-1,52:55='text',<0>,175:123]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,59:63='first',<0>,175:130].[@-1,65:65='e',<0>,175:136]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,69:74='second',<0>,175:140].[@-1,76:76='e',<0>,175:147]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,175:151].[@-1,86:88='blk',<0>,175:157]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 translate $gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)
2023-10-12 23:28:52:259 action-translator LogManager.java:25 attr [@-1,1:3='gua',<0>,181:69]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,30:34='GUARD',<0>,181:98].[@-1,36:39='line',<0>,181:104]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,43:47='GUARD',<0>,181:111].[@-1,49:51='pos',<0>,181:117]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,181:123].[@-1,60:60='e',<0>,181:128]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,181:132].[@-1,70:72='blk',<0>,181:138]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,76:76='r',<0>,181:144].[@-1,78:81='text',<0>,181:146]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 translate $tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)
2023-10-12 23:28:52:259 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,185:18]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,34:39='RETURN',<0>,185:51].[@-1,41:44='line',<0>,185:58]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,48:53='RETURN',<0>,185:65].[@-1,55:57='pos',<0>,185:72]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 translate $tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)
2023-10-12 23:28:52:259 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,186:23]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,34:39='RETURN',<0>,186:56].[@-1,41:44='line',<0>,186:63]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,48:53='RETURN',<0>,186:70].[@-1,55:57='pos',<0>,186:77]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,186:83].[@-1,66:66='e',<0>,186:88]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 translate $tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-10-12 23:28:52:259 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,187:20]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,187:53].[@-1,43:46='line',<0>,187:62]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,187:69].[@-1,59:61='pos',<0>,187:78]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 translate $tran = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-10-12 23:28:52:259 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,188:17]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,188:47].[@-1,37:40='line',<0>,188:53]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,188:60].[@-1,50:52='pos',<0>,188:66]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 translate $decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")
2023-10-12 23:28:52:259 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,192:95]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,192:137].[@-1,47:50='line',<0>,192:141]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,192:148].[@-1,58:60='pos',<0>,192:152]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,192:158].[@-1,67:70='text',<0>,192:161]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,74:77='type',<0>,192:168].[@-1,79:79='t',<0>,192:173]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,83:92='listParams',<0>,192:177].[@-1,94:94='l',<0>,192:188]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 translate $decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")
2023-10-12 23:28:52:259 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,193:84]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,193:126].[@-1,47:50='line',<0>,193:130]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,193:137].[@-1,58:60='pos',<0>,193:141]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,193:147].[@-1,67:70='text',<0>,193:150]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,74:77='type',<0>,193:157].[@-1,79:79='t',<0>,193:162]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 translate $decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)
2023-10-12 23:28:52:259 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,195:67]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,195:109].[@-1,47:50='line',<0>,195:113]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,195:120].[@-1,58:60='pos',<0>,195:124]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,64:64='F',<0>,195:130].[@-1,66:69='text',<0>,195:132]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,73:76='type',<0>,195:139].[@-1,78:78='t',<0>,195:144]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,87:87='S',<0>,195:153].[@-1,89:92='text',<0>,195:155]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 translate $accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)
2023-10-12 23:28:52:259 action-translator LogManager.java:25 attr [@-1,1:12='accessfuncin',<0>,199:38]
2023-10-12 23:28:52:259 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,199:83].[@-1,49:52='line',<0>,199:86]
2023-10-12 23:28:52:267 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,199:93].[@-1,59:61='pos',<0>,199:96]
2023-10-12 23:28:52:267 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,199:102].[@-1,68:71='text',<0>,199:105]
2023-10-12 23:28:52:267 action-translator LogManager.java:25 qattr [@-1,75:84='listParams',<0>,199:112].[@-1,86:86='l',<0>,199:123]
2023-10-12 23:28:52:267 action-translator LogManager.java:25 translate $app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)
2023-10-12 23:28:52:268 action-translator LogManager.java:25 attr [@-1,1:3='app',<0>,204:46]
2023-10-12 23:28:52:268 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,204:76].[@-1,34:37='line',<0>,204:79]
2023-10-12 23:28:52:269 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,204:86].[@-1,44:46='pos',<0>,204:89]
2023-10-12 23:28:52:269 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,204:95].[@-1,53:56='text',<0>,204:98]
2023-10-12 23:28:52:269 action-translator LogManager.java:25 qattr [@-1,60:63='expr',<0>,204:105].[@-1,65:65='e',<0>,204:110]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 translate $removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)
2023-10-12 23:28:52:270 action-translator LogManager.java:25 attr [@-1,1:6='removl',<0>,208:45]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,208:82].[@-1,41:44='line',<0>,208:85]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,208:92].[@-1,51:53='pos',<0>,208:95]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,208:101].[@-1,60:63='text',<0>,208:104]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 translate $remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)
2023-10-12 23:28:52:270 action-translator LogManager.java:25 attr [@-1,1:5='remov',<0>,213:59]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,213:91].[@-1,36:39='line',<0>,213:94]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,213:101].[@-1,46:48='pos',<0>,213:104]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,213:110].[@-1,55:58='text',<0>,213:113]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,213:120].[@-1,67:67='e',<0>,213:125]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 translate $emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)
2023-10-12 23:28:52:270 action-translator LogManager.java:25 attr [@-1,1:8='emptyvec',<0>,217:21]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,217:60].[@-1,43:46='line',<0>,217:63]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,217:70].[@-1,53:55='pos',<0>,217:73]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,217:79].[@-1,62:65='text',<0>,217:82]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 translate $count = expressions.NewCount($ID.line, $ID.pos, $ID.text)
2023-10-12 23:28:52:270 action-translator LogManager.java:25 attr [@-1,1:5='count',<0>,221:18]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,221:48].[@-1,34:37='line',<0>,221:51]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,221:58].[@-1,44:46='pos',<0>,221:61]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,221:67].[@-1,53:56='text',<0>,221:70]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 translate $accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)
2023-10-12 23:28:52:270 action-translator LogManager.java:25 attr [@-1,1:9='accessvec',<0>,225:35]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,225:76].[@-1,45:48='line',<0>,225:79]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,225:86].[@-1,55:57='pos',<0>,225:89]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,225:95].[@-1,64:67='text',<0>,225:98]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,71:74='expr',<0>,225:105].[@-1,76:76='e',<0>,225:110]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 translate $assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)
2023-10-12 23:28:52:270 action-translator LogManager.java:25 attr [@-1,1:9='assignvec',<0>,230:70]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,230:117].[@-1,51:54='line',<0>,230:120]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,230:127].[@-1,61:63='pos',<0>,230:130]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,67:68='ID',<0>,230:136].[@-1,70:73='text',<0>,230:139]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,77:83='expprim',<0>,230:146].[@-1,85:85='e',<0>,230:154]
2023-10-12 23:28:52:270 action-translator LogManager.java:25 qattr [@-1,89:98='expsegundo',<0>,230:158].[@-1,100:100='e',<0>,230:169]
2023-10-12 23:28:52:276 action-translator LogManager.java:25 translate $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)
2023-10-12 23:28:52:276 action-translator LogManager.java:25 attr [@-1,1:7='decfunc',<0>,240:79]
2023-10-12 23:28:52:276 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,240:124].[@-1,49:52='line',<0>,240:127]
2023-10-12 23:28:52:276 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,240:134].[@-1,59:61='pos',<0>,240:137]
2023-10-12 23:28:52:276 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,240:143].[@-1,68:71='text',<0>,240:146]
2023-10-12 23:28:52:276 action-translator LogManager.java:25 qattr [@-1,75:88='listParamsFunc',<0>,240:153].[@-1,90:91='lf',<0>,240:168]
2023-10-12 23:28:52:276 action-translator LogManager.java:25 qattr [@-1,95:98='type',<0>,240:173].[@-1,100:100='t',<0>,240:178]
2023-10-12 23:28:52:276 action-translator LogManager.java:25 qattr [@-1,104:108='block',<0>,240:182].[@-1,110:112='blk',<0>,240:188]
2023-10-12 23:28:52:276 action-translator LogManager.java:25 translate 
    
    $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2);
2023-10-12 23:28:52:276 action-translator LogManager.java:25 setAttr [@-1,13:19='decfunc',<0>,243:5] [@-1,22:137=' instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2)',<0>,243:14]
2023-10-12 23:28:52:276 action-translator LogManager.java:25 translate  instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2)
2023-10-12 23:28:52:276 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,241:99].[@-1,39:42='line',<0>,241:102]
2023-10-12 23:28:52:276 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,241:109].[@-1,49:51='pos',<0>,241:112]
2023-10-12 23:28:52:278 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,241:118].[@-1,58:61='text',<0>,241:121]
2023-10-12 23:28:52:278 action-translator LogManager.java:25 qattr [@-1,65:78='listParamsFunc',<0>,241:128].[@-1,80:81='lf',<0>,241:143]
2023-10-12 23:28:52:278 action-translator LogManager.java:25 qattr [@-1,103:107='block',<0>,241:166].[@-1,109:111='blk',<0>,241:172]
2023-10-12 23:28:52:278 action-translator LogManager.java:25 translate $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)
2023-10-12 23:28:52:278 action-translator LogManager.java:25 attr [@-1,1:7='decfunc',<0>,244:64]
2023-10-12 23:28:52:278 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,244:109].[@-1,49:52='line',<0>,244:112]
2023-10-12 23:28:52:278 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,244:119].[@-1,59:61='pos',<0>,244:122]
2023-10-12 23:28:52:278 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,244:128].[@-1,68:71='text',<0>,244:131]
2023-10-12 23:28:52:278 action-translator LogManager.java:25 qattr [@-1,80:83='type',<0>,244:143].[@-1,85:85='t',<0>,244:148]
2023-10-12 23:28:52:278 action-translator LogManager.java:25 qattr [@-1,89:93='block',<0>,244:152].[@-1,95:97='blk',<0>,244:158]
2023-10-12 23:28:52:279 action-translator LogManager.java:25 translate 
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }

2023-10-12 23:28:52:279 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,246:8].[@-1,16:18='blk',<0>,246:14]
2023-10-12 23:28:52:279 action-translator LogManager.java:25 attr [@-1,39:45='decfunc',<0>,247:10]
2023-10-12 23:28:52:279 action-translator LogManager.java:25 qattr [@-1,84:85='ID',<0>,247:55].[@-1,87:90='line',<0>,247:58]
2023-10-12 23:28:52:279 action-translator LogManager.java:25 qattr [@-1,94:95='ID',<0>,247:65].[@-1,97:99='pos',<0>,247:68]
2023-10-12 23:28:52:279 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,247:74].[@-1,106:109='text',<0>,247:77]
2023-10-12 23:28:52:279 action-translator LogManager.java:25 qattr [@-1,136:140='block',<0>,247:107].[@-1,142:144='blk',<0>,247:113]
2023-10-12 23:28:52:280 action-translator LogManager.java:25 translate 
2023-10-12 23:28:52:280 action-translator LogManager.java:25 translate 
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        
2023-10-12 23:28:52:280 action-translator LogManager.java:25 attr [@-1,21:22='lf',<0>,4:13]
2023-10-12 23:28:52:280 action-translator LogManager.java:25 attr [@-1,56:57='lf',<0>,5:13]
2023-10-12 23:28:52:280 action-translator LogManager.java:25 attr [@-1,69:70='lf',<0>,5:26]
2023-10-12 23:28:52:280 action-translator LogManager.java:25 qattr [@-1,74:90='parameterfuncstmt',<0>,5:31].[@-1,92:104='parameterfunc',<0>,5:49]
2023-10-12 23:28:52:281 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-12 23:28:52:282 action-translator LogManager.java:25 translate 
                              
                                          var arrf []interface{}
                                          arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                          $lf = arrf
                                      
2023-10-12 23:28:52:282 action-translator LogManager.java:25 qattr [@-1,157:161='listf',<0>,12:57].[@-1,163:164='lf',<0>,12:63]
2023-10-12 23:28:52:282 action-translator LogManager.java:25 qattr [@-1,168:184='parameterfuncstmt',<0>,12:68].[@-1,186:198='parameterfunc',<0>,12:86]
2023-10-12 23:28:52:282 action-translator LogManager.java:25 attr [@-1,245:246='lf',<0>,13:43]
2023-10-12 23:28:52:282 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-12 23:28:52:284 action-translator LogManager.java:25 translate $parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text, 1)
2023-10-12 23:28:52:284 action-translator LogManager.java:25 attr [@-1,1:13='parameterfunc',<0>,266:42]
2023-10-12 23:28:52:284 action-translator LogManager.java:25 qattr [@-1,44:47='exte',<0>,266:85].[@-1,49:52='line',<0>,266:90]
2023-10-12 23:28:52:284 action-translator LogManager.java:25 qattr [@-1,56:59='exte',<0>,266:97].[@-1,61:63='pos',<0>,266:102]
2023-10-12 23:28:52:284 action-translator LogManager.java:25 qattr [@-1,67:70='type',<0>,266:108].[@-1,72:72='t',<0>,266:113]
2023-10-12 23:28:52:284 action-translator LogManager.java:25 qattr [@-1,76:79='exte',<0>,266:117].[@-1,81:84='text',<0>,266:122]
2023-10-12 23:28:52:284 action-translator LogManager.java:25 qattr [@-1,89:90='ID',<0>,266:130].[@-1,92:95='text',<0>,266:133]
2023-10-12 23:28:52:284 action-translator LogManager.java:25 translate $parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2);
2023-10-12 23:28:52:285 action-translator LogManager.java:25 setAttr [@-1,1:13='parameterfunc',<0>,267:73] [@-1,16:98=' expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2)',<0>,267:88]
2023-10-12 23:28:52:285 action-translator LogManager.java:25 translate  expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2)
2023-10-12 23:28:52:285 action-translator LogManager.java:25 qattr [@-1,28:31='exte',<0>,267:100].[@-1,33:36='line',<0>,267:105]
2023-10-12 23:28:52:285 action-translator LogManager.java:25 qattr [@-1,40:43='exte',<0>,267:112].[@-1,45:47='pos',<0>,267:117]
2023-10-12 23:28:52:285 action-translator LogManager.java:25 qattr [@-1,51:54='type',<0>,267:123].[@-1,56:56='t',<0>,267:128]
2023-10-12 23:28:52:286 action-translator LogManager.java:25 qattr [@-1,60:63='exte',<0>,267:132].[@-1,65:68='text',<0>,267:137]
2023-10-12 23:28:52:286 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,267:145].[@-1,76:79='text',<0>,267:148]
2023-10-12 23:28:52:286 action-translator LogManager.java:25 translate $parameterfunc = expressions.NewParameters($ID.line, $ID.pos, $type.t, "_",  $ID.text, 1)
2023-10-12 23:28:52:286 action-translator LogManager.java:25 attr [@-1,1:13='parameterfunc',<0>,268:22]
2023-10-12 23:28:52:286 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,268:65].[@-1,47:50='line',<0>,268:68]
2023-10-12 23:28:52:286 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,268:75].[@-1,57:59='pos',<0>,268:78]
2023-10-12 23:28:52:286 action-translator LogManager.java:25 qattr [@-1,63:66='type',<0>,268:84].[@-1,68:68='t',<0>,268:89]
2023-10-12 23:28:52:287 action-translator LogManager.java:25 qattr [@-1,78:79='ID',<0>,268:99].[@-1,81:84='text',<0>,268:102]
2023-10-12 23:28:52:287 action-translator LogManager.java:25 translate  $decstruct = instructions.NewToDeclareStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStruct.l) 
2023-10-12 23:28:52:287 action-translator LogManager.java:25 attr [@-1,2:10='decstruct',<0>,272:43]
2023-10-12 23:28:52:287 action-translator LogManager.java:25 qattr [@-1,47:52='STRUCT',<0>,272:88].[@-1,54:57='line',<0>,272:95]
2023-10-12 23:28:52:288 action-translator LogManager.java:25 qattr [@-1,61:66='STRUCT',<0>,272:102].[@-1,68:70='pos',<0>,272:109]
2023-10-12 23:28:52:288 action-translator LogManager.java:25 qattr [@-1,74:75='ID',<0>,272:115].[@-1,77:80='text',<0>,272:118]
2023-10-12 23:28:52:288 action-translator LogManager.java:25 qattr [@-1,84:93='listStruct',<0>,272:125].[@-1,95:95='l',<0>,272:136]
2023-10-12 23:28:52:288 action-translator LogManager.java:25 translate 
2023-10-12 23:28:52:289 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr

2023-10-12 23:28:52:289 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,4:64].[@-1,116:119='text',<0>,4:67]
2023-10-12 23:28:52:290 action-translator LogManager.java:25 qattr [@-1,123:126='type',<0>,4:74].[@-1,128:128='t',<0>,4:79]
2023-10-12 23:28:52:290 action-translator LogManager.java:25 attr [@-1,211:211='l',<0>,6:25]
2023-10-12 23:28:52:290 action-translator LogManager.java:25 translate  $l = []interface{}{} 
2023-10-12 23:28:52:290 action-translator LogManager.java:25 attr [@-1,2:2='l',<0>,8:12]
2023-10-12 23:28:52:290 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-12 23:28:52:290 action-translator LogManager.java:25 translate 
                                      var arr []interface{}
                                      newParams := environment.NewStructType($ID.text, $type.t)
                                      arr = append($list.l, newParams)
                                      $l = arr

          
2023-10-12 23:28:52:290 action-translator LogManager.java:25 qattr [@-1,141:142='ID',<0>,13:78].[@-1,144:147='text',<0>,13:81]
2023-10-12 23:28:52:290 action-translator LogManager.java:25 qattr [@-1,151:154='type',<0>,13:88].[@-1,156:156='t',<0>,13:93]
2023-10-12 23:28:52:290 action-translator LogManager.java:25 qattr [@-1,212:215='list',<0>,14:52].[@-1,217:217='l',<0>,14:57]
2023-10-12 23:28:52:291 action-translator LogManager.java:25 attr [@-1,271:271='l',<0>,15:39]
2023-10-12 23:28:52:291 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-12 23:28:52:293 action-translator LogManager.java:25 translate 
2023-10-12 23:28:52:293 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) 
2023-10-12 23:28:52:293 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:74]
2023-10-12 23:28:52:293 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,2:104].[@-1,37:41='start',<0>,2:109]
2023-10-12 23:28:52:293 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,2:127].[@-1,60:64='start',<0>,2:132]
2023-10-12 23:28:52:293 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,2:152].[@-1,85:85='e',<0>,2:157]
2023-10-12 23:28:52:293 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,2:161].[@-1,92:95='text',<0>,2:164]
2023-10-12 23:28:52:294 action-translator LogManager.java:25 qattr [@-1,99:102='left',<0>,2:171].[@-1,104:104='e',<0>,2:176]
2023-10-12 23:28:52:294 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)
2023-10-12 23:28:52:294 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:71]
2023-10-12 23:28:52:294 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,3:101].[@-1,37:41='start',<0>,3:106]
2023-10-12 23:28:52:294 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,3:124].[@-1,60:64='start',<0>,3:129]
2023-10-12 23:28:52:294 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,3:149].[@-1,85:85='e',<0>,3:154]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 qattr [@-1,90:91='op',<0>,3:159].[@-1,93:96='text',<0>,3:162]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-10-12 23:28:52:295 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:82]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:87].[@-1,12:12='e',<0>,4:92]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 translate    
        
        if (strings.Contains($NUMBER.text,".")){
           
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,$NUMBER.text,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-10-12 23:28:52:295 action-translator LogManager.java:25 qattr [@-1,45:50='NUMBER',<0>,8:30].[@-1,52:55='text',<0>,8:37]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 attr [@-1,91:91='e',<0>,10:13]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 qattr [@-1,121:126='NUMBER',<0>,10:43].[@-1,128:131='line',<0>,10:50]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 qattr [@-1,134:139='NUMBER',<0>,10:56].[@-1,141:143='pos',<0>,10:63]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 qattr [@-1,146:151='NUMBER',<0>,10:68].[@-1,153:156='text',<0>,10:75]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 qattr [@-1,231:236='NUMBER',<0>,12:37].[@-1,238:241='text',<0>,12:44]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 attr [@-1,334:334='e',<0>,16:13]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 qattr [@-1,364:369='NUMBER',<0>,16:43].[@-1,371:374='line',<0>,16:50]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 qattr [@-1,377:382='NUMBER',<0>,16:56].[@-1,384:386='pos',<0>,16:63]
2023-10-12 23:28:52:295 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-10-12 23:28:52:297 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,21:16].[@-1,25:28='text',<0>,21:23]
2023-10-12 23:28:52:297 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,22:9]
2023-10-12 23:28:52:297 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,22:39].[@-1,77:80='line',<0>,22:46]
2023-10-12 23:28:52:297 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,22:53].[@-1,91:93='pos',<0>,22:60]
2023-10-12 23:28:52:297 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-10-12 23:28:52:297 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,24:34]
2023-10-12 23:28:52:297 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,24:64].[@-1,37:40='line',<0>,24:69]
2023-10-12 23:28:52:297 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,24:76].[@-1,49:51='pos',<0>,24:81]
2023-10-12 23:28:52:297 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-10-12 23:28:52:297 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,25:35]
2023-10-12 23:28:52:297 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,25:65].[@-1,38:41='line',<0>,25:71]
2023-10-12 23:28:52:297 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,25:78].[@-1,51:53='pos',<0>,25:84]
2023-10-12 23:28:52:298 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-10-12 23:28:52:298 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:33]
2023-10-12 23:28:52:298 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,26:63].[@-1,36:39='line',<0>,26:67]
2023-10-12 23:28:52:298 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,26:74].[@-1,47:49='pos',<0>,26:78]
2023-10-12 23:28:52:298 action-translator LogManager.java:25 translate $e = $accessstmt.access
2023-10-12 23:28:52:298 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,27:39]
2023-10-12 23:28:52:299 action-translator LogManager.java:25 qattr [@-1,6:15='accessstmt',<0>,27:44].[@-1,17:22='access',<0>,27:55]
2023-10-12 23:28:52:299 action-translator LogManager.java:25 translate $e = $emptvecstmt.emptyvec
2023-10-12 23:28:52:299 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,28:40]
2023-10-12 23:28:52:299 action-translator LogManager.java:25 qattr [@-1,6:16='emptvecstmt',<0>,28:45].[@-1,18:25='emptyvec',<0>,28:57]
2023-10-12 23:28:52:299 action-translator LogManager.java:25 translate $e = $countvecstmt.count
2023-10-12 23:28:52:299 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,29:41]
2023-10-12 23:28:52:299 action-translator LogManager.java:25 qattr [@-1,6:17='countvecstmt',<0>,29:46].[@-1,19:23='count',<0>,29:59]
2023-10-12 23:28:52:299 action-translator LogManager.java:25 translate $e = $accessvecstmt.accessvec
2023-10-12 23:28:52:299 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,30:42]
2023-10-12 23:28:52:299 action-translator LogManager.java:25 qattr [@-1,6:18='accessvecstmt',<0>,30:47].[@-1,20:28='accessvec',<0>,30:61]
2023-10-12 23:28:52:299 action-translator LogManager.java:25 translate $e = $intfunctionstmt.intfunc
2023-10-12 23:28:52:304 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,31:44]
2023-10-12 23:28:52:304 action-translator LogManager.java:25 qattr [@-1,6:20='intfunctionstmt',<0>,31:49].[@-1,22:28='intfunc',<0>,31:65]
2023-10-12 23:28:52:304 action-translator LogManager.java:25 translate $e = $floatfunctionstmt.floatfunc
2023-10-12 23:28:52:304 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,32:46]
2023-10-12 23:28:52:304 action-translator LogManager.java:25 qattr [@-1,6:22='floatfunctionstmt',<0>,32:51].[@-1,24:32='floatfunc',<0>,32:69]
2023-10-12 23:28:52:304 action-translator LogManager.java:25 translate $e = $stringfunctionstmt.stringfunc
2023-10-12 23:28:52:304 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,33:47]
2023-10-12 23:28:52:305 action-translator LogManager.java:25 qattr [@-1,6:23='stringfunctionstmt',<0>,33:52].[@-1,25:34='stringfunc',<0>,33:71]
2023-10-12 23:28:52:305 action-translator LogManager.java:25 translate $e = $accessfuncstmt.funcexp
2023-10-12 23:28:52:305 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,34:47]
2023-10-12 23:28:52:305 action-translator LogManager.java:25 qattr [@-1,6:19='accessfuncstmt',<0>,34:52].[@-1,21:27='funcexp',<0>,34:67]
2023-10-12 23:28:52:306 action-translator LogManager.java:25 translate  $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2023-10-12 23:28:52:306 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:167]
2023-10-12 23:28:52:306 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,35:197].[@-1,35:38='line',<0>,35:200]
2023-10-12 23:28:52:306 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,35:207].[@-1,45:47='pos',<0>,35:210]
2023-10-12 23:28:52:306 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,35:216].[@-1,54:57='text',<0>,35:219]
2023-10-12 23:28:52:306 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,35:226].[@-1,75:75='l',<0>,35:240]
2023-10-12 23:28:52:306 action-translator LogManager.java:25 translate $e = $accessstructstmt.accessstruct
2023-10-12 23:28:52:306 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,36:45]
2023-10-12 23:28:52:306 action-translator LogManager.java:25 qattr [@-1,6:21='accessstructstmt',<0>,36:50].[@-1,23:34='accessstruct',<0>,36:67]
2023-10-12 23:28:52:307 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2023-10-12 23:28:52:307 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-12 23:28:52:307 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:142]
2023-10-12 23:28:52:307 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:172].[@-1,37:41='start',<0>,39:177]
2023-10-12 23:28:52:307 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:195].[@-1,60:64='start',<0>,39:200]
2023-10-12 23:28:52:307 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:220].[@-1,85:85='e',<0>,39:225]
2023-10-12 23:28:52:307 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:229].[@-1,92:95='text',<0>,39:232]
2023-10-12 23:28:52:307 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:239].[@-1,105:105='e',<0>,39:245]
2023-10-12 23:28:52:308 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-10-12 23:28:52:308 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-12 23:28:52:308 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:177]
2023-10-12 23:28:52:308 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:207].[@-1,37:41='start',<0>,40:212]
2023-10-12 23:28:52:308 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:230].[@-1,60:64='start',<0>,40:235]
2023-10-12 23:28:52:308 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:255].[@-1,85:85='e',<0>,40:260]
2023-10-12 23:28:52:308 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:264].[@-1,92:95='text',<0>,40:267]
2023-10-12 23:28:52:308 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:274].[@-1,105:105='e',<0>,40:280]
2023-10-12 23:28:52:308 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-10-12 23:28:52:308 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-12 23:28:52:308 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:157]
2023-10-12 23:28:52:308 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:187].[@-1,37:41='start',<0>,41:192]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:210].[@-1,60:64='start',<0>,41:215]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:235].[@-1,85:85='e',<0>,41:240]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:244].[@-1,92:95='text',<0>,41:247]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:254].[@-1,105:105='e',<0>,41:260]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-10-12 23:28:52:309 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-12 23:28:52:309 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:157]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:187].[@-1,37:41='start',<0>,42:192]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:210].[@-1,60:64='start',<0>,42:215]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:235].[@-1,85:85='e',<0>,42:240]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:244].[@-1,92:95='text',<0>,42:247]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:254].[@-1,105:105='e',<0>,42:260]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-10-12 23:28:52:309 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-12 23:28:52:309 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:154]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:184].[@-1,37:41='start',<0>,43:189]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:207].[@-1,60:64='start',<0>,43:212]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:232].[@-1,85:85='e',<0>,43:237]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:241].[@-1,92:95='text',<0>,43:244]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:251].[@-1,105:105='e',<0>,43:257]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-12 23:28:52:309 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-12 23:28:52:309 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:129]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:159].[@-1,37:41='start',<0>,44:164]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:182].[@-1,60:64='start',<0>,44:187]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:207].[@-1,85:85='e',<0>,44:212]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:216].[@-1,92:95='text',<0>,44:219]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:226].[@-1,105:105='e',<0>,44:232]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-12 23:28:52:309 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-12 23:28:52:309 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,45:128]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,45:158].[@-1,37:41='start',<0>,45:163]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,45:181].[@-1,60:64='start',<0>,45:186]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,45:206].[@-1,85:85='e',<0>,45:211]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,45:215].[@-1,92:95='text',<0>,45:218]
2023-10-12 23:28:52:309 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,45:225].[@-1,105:105='e',<0>,45:231]
2023-10-12 23:28:52:313 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2023-10-12 23:28:52:313 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-10-12 23:28:52:313 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-10-12 23:28:52:313 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-10-12 23:28:52:313 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-10-12 23:28:52:313 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-12 23:28:52:313 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-12 23:28:52:314 action-translator LogManager.java:25 translate  $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text, "nil")  
2023-10-12 23:28:52:314 action-translator LogManager.java:25 attr [@-1,2:13='accessstruct',<0>,342:20]
2023-10-12 23:28:52:314 action-translator LogManager.java:25 qattr [@-1,46:49='list',<0>,342:64].[@-1,51:54='line',<0>,342:69]
2023-10-12 23:28:52:314 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,342:76].[@-1,63:65='pos',<0>,342:81]
2023-10-12 23:28:52:314 action-translator LogManager.java:25 qattr [@-1,69:72='list',<0>,342:87].[@-1,74:77='text',<0>,342:92]
2023-10-12 23:28:52:314 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,342:99].[@-1,84:87='text',<0>,342:102]
2023-10-12 23:28:52:314 action-translator LogManager.java:25 translate  $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text, $sec.text)  
2023-10-12 23:28:52:315 action-translator LogManager.java:25 attr [@-1,2:13='accessstruct',<0>,343:35]
2023-10-12 23:28:52:315 action-translator LogManager.java:25 qattr [@-1,46:49='list',<0>,343:79].[@-1,51:54='line',<0>,343:84]
2023-10-12 23:28:52:315 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,343:91].[@-1,63:65='pos',<0>,343:96]
2023-10-12 23:28:52:315 action-translator LogManager.java:25 qattr [@-1,69:72='list',<0>,343:102].[@-1,74:77='text',<0>,343:107]
2023-10-12 23:28:52:315 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,343:114].[@-1,84:87='text',<0>,343:117]
2023-10-12 23:28:52:315 action-translator LogManager.java:25 qattr [@-1,91:93='sec',<0>,343:124].[@-1,95:98='text',<0>,343:128]
2023-10-12 23:28:52:315 action-translator LogManager.java:25 translate $funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)
2023-10-12 23:28:52:315 action-translator LogManager.java:25 attr [@-1,1:7='funcexp',<0>,348:31]
2023-10-12 23:28:52:315 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,348:72].[@-1,45:48='line',<0>,348:75]
2023-10-12 23:28:52:315 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,348:82].[@-1,55:57='pos',<0>,348:85]
2023-10-12 23:28:52:315 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,348:91].[@-1,64:67='text',<0>,348:94]
2023-10-12 23:28:52:315 action-translator LogManager.java:25 qattr [@-1,71:80='listParams',<0>,348:101].[@-1,82:82='l',<0>,348:112]
2023-10-12 23:28:52:316 action-translator LogManager.java:25 translate $intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)
2023-10-12 23:28:52:316 action-translator LogManager.java:25 attr [@-1,1:7='intfunc',<0>,353:27]
2023-10-12 23:28:52:316 action-translator LogManager.java:25 qattr [@-1,39:42='INTS',<0>,353:65].[@-1,44:47='line',<0>,353:70]
2023-10-12 23:28:52:316 action-translator LogManager.java:25 qattr [@-1,51:54='INTS',<0>,353:77].[@-1,56:58='pos',<0>,353:82]
2023-10-12 23:28:52:317 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,353:88].[@-1,67:67='e',<0>,353:93]
2023-10-12 23:28:52:317 action-translator LogManager.java:25 translate $floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)
2023-10-12 23:28:52:317 action-translator LogManager.java:25 attr [@-1,1:9='floatfunc',<0>,357:29]
2023-10-12 23:28:52:317 action-translator LogManager.java:25 qattr [@-1,43:48='FLOATS',<0>,357:71].[@-1,50:53='line',<0>,357:78]
2023-10-12 23:28:52:317 action-translator LogManager.java:25 qattr [@-1,57:62='FLOATS',<0>,357:85].[@-1,64:66='pos',<0>,357:92]
2023-10-12 23:28:52:317 action-translator LogManager.java:25 qattr [@-1,70:73='expr',<0>,357:98].[@-1,75:75='e',<0>,357:103]
2023-10-12 23:28:52:317 action-translator LogManager.java:25 translate $stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)
2023-10-12 23:28:52:318 action-translator LogManager.java:25 attr [@-1,1:10='stringfunc',<0>,361:30]
2023-10-12 23:28:52:318 action-translator LogManager.java:25 qattr [@-1,45:51='STRINGS',<0>,361:74].[@-1,53:56='line',<0>,361:82]
2023-10-12 23:28:52:318 action-translator LogManager.java:25 qattr [@-1,60:66='STRINGS',<0>,361:89].[@-1,68:70='pos',<0>,361:97]
2023-10-12 23:28:52:319 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,361:103].[@-1,79:79='e',<0>,361:108]
2023-10-12 23:28:52:319 action-translator LogManager.java:25 translate $access = expressions.NewAccess($op.line, $op.pos, $op.text)
2023-10-12 23:28:52:319 action-translator LogManager.java:25 attr [@-1,1:6='access',<0>,367:9]
2023-10-12 23:28:52:320 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,367:41].[@-1,36:39='line',<0>,367:44]
2023-10-12 23:28:52:320 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,367:51].[@-1,46:48='pos',<0>,367:54]
2023-10-12 23:28:52:320 action-translator LogManager.java:25 qattr [@-1,52:53='op',<0>,367:60].[@-1,55:58='text',<0>,367:63]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)
2023-10-12 23:28:52:321 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,372:25]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,372:78].[@-1,57:60='line',<0>,372:81]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,372:88].[@-1,67:69='pos',<0>,372:91]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,372:97].[@-1,76:79='text',<0>,372:100]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 qattr [@-1,83:88='IG_ADD',<0>,372:107].[@-1,90:93='text',<0>,372:114]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,372:121].[@-1,102:102='e',<0>,372:126]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)
2023-10-12 23:28:52:321 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,373:26]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,373:79].[@-1,57:60='line',<0>,373:82]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,373:89].[@-1,67:69='pos',<0>,373:92]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,373:98].[@-1,76:79='text',<0>,373:101]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 qattr [@-1,83:88='IG_SUB',<0>,373:108].[@-1,90:93='text',<0>,373:115]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,373:122].[@-1,102:102='e',<0>,373:127]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 translate $t = environment.STRING
2023-10-12 23:28:52:321 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,378:13]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 translate $t = environment.INTEGER
2023-10-12 23:28:52:321 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,379:10]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 translate $t = environment.FLOAT
2023-10-12 23:28:52:321 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,380:12]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 translate $t = environment.BOOLEAN 
2023-10-12 23:28:52:321 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,381:17]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 translate $t = environment.CHARACTER
2023-10-12 23:28:52:321 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,382:19]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 translate  $t = environment.STRUCT  
2023-10-12 23:28:52:321 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,383:9]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 translate 
2023-10-12 23:28:52:321 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-12 23:28:52:321 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-12 23:28:52:321 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-12 23:28:52:325 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-10-12 23:28:52:325 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-10-12 23:28:52:325 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-10-12 23:28:52:325 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-10-12 23:28:52:325 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-12 23:28:52:325 action-translator LogManager.java:25 translate 
2023-10-12 23:28:52:325 action-translator LogManager.java:25 translate 
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                
2023-10-12 23:28:52:326 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:60].[@-1,108:111='text',<0>,4:63]
2023-10-12 23:28:52:326 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,4:70].[@-1,120:120='e',<0>,4:75]
2023-10-12 23:28:52:326 action-translator LogManager.java:25 attr [@-1,192:192='l',<0>,6:21]
2023-10-12 23:28:52:326 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-12 23:28:52:326 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,9:9]
2023-10-12 23:28:52:327 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-12 23:28:52:327 action-translator LogManager.java:25 translate 
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  
2023-10-12 23:28:52:327 action-translator LogManager.java:25 qattr [@-1,173:174='ID',<0>,15:94].[@-1,176:179='text',<0>,15:97]
2023-10-12 23:28:52:327 action-translator LogManager.java:25 qattr [@-1,183:186='expr',<0>,15:104].[@-1,188:188='e',<0>,15:109]
2023-10-12 23:28:52:327 action-translator LogManager.java:25 qattr [@-1,260:263='list',<0>,16:68].[@-1,265:265='l',<0>,16:73]
2023-10-12 23:28:52:328 action-translator LogManager.java:25 attr [@-1,332:332='l',<0>,17:55]
2023-10-12 23:28:52:328 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-12 23:28:52:794 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-10-12 23:28:52:794 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-10-12 23:28:52:998 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-10-12 23:28:52:998 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

